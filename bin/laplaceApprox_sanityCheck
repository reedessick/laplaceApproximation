#!/usr/bin/python

__usage__ = "laplaceApprox_sanityCheck [--options]"
__description__ = "a test script to ensure our some heuristics look correct, specifically things that are hard to put in an assertion statement"
__author__ = "Reed Essick"

#-------------------------------------------------

from laplaceApprox import utils
import numpy as np

import matplotlib
matplotlib.use('Agg')
from matplotlib import pyplot as plt

from optparse import OptionParser

#-------------------------------------------------

parser = OptionParser(usage=__usage__, description=__description__)

parser.add_option('-v', '--verbose', default=False, action='store_true')
parser.add_option('-V', '--Verbose', default=False, action='store_true')

### options about how accurate nonlinear solvers are required to be

parser.add_option('', '--f_tol', default=1e-10, type='float',
    help='the tolerance passed to nonlinear root finders')

### options about how we test

parser.add_option('', '--e_tol', default=1e-10, type='float',
    help='the relative error threshold for comparing floats')

parser.add_option('', '--Nsamp', default=1, type='int',
    help='the number of randomly drawn samples are used for testing')

parser.add_option('', '--min-rho2', default=1, type='float',
    help='the minimum single-IFO snr allowed in the random samples')
parser.add_option('', '--max-rho2', default=100, type='float',
    help='the maximum single-IFO snr allowed in the random samples')

parser.add_option('', '--c_bsn', default=1.0, type='float',
    help='passed to BayesMapParams')
parser.add_option('', '--g_bsn', default=1.0, type='float',
    help='passed to BayesMapParams')
parser.add_option('', '--c_bci', default=1.0, type='float',
    help='passed to BayesMapParams')
parser.add_option('', '--g_bci', default=1.0, type='float',
    help='passed to BayesMapParams')

### options about what to test
parser.add_option('', '--everything', default=False, action='store_true',
    help='test everything')

#--- joint distributions
parser.add_option('', '--lnP_rhoA2rhoB2', default=False, action='store_true',
    help='test lnProb(rhoA2,rhoB2|rhoA2o,rhoB2o) sanity')
parser.add_option('', '--lnP_rho2eta2', default=False, action='store_true',
    help='test lnProb(rho2,eta2|rhoA2o,rhoB2o) sanity')
parser.add_option('', '--lnP_lnBSNlnBCI', default=False, action='store_true',
    help='test lnProb(lnBSN,lnBCI|rhoA2o,rhoB2o) sanity')

#--- marginal distributions
parser.add_option('', '--lnP_rhoA2', default=False, action='store_true',
    help='test lnProb(rhoA2|rhoA2o,rhoB2o) sanity')
parser.add_option('', '--lnP_rhoB2', default=False, action='store_true',
    help='test lnProb(rhoB2|rhoA2o,rhoB2o) sanity')

parser.add_option('', '--lnP_rho2', default=False, action='store_true',
    help='test lnProb(rho2|rhoA2o,rhoB2o) sanity')
parser.add_option('', '--lnP_eta2', default=False, action='store_true',
    help='test lnProb(eta2|rhoA2o,rhoB2o) sanity')

parser.add_option('', '--lnP_lnBSN', default=False, action='store_true',
    help='test lnProb(lnBSN|rhoA2o,rhoB2o) sanity')
parser.add_option('', '--lnP_lnBCI', default=False, action='store_true',
    help='test lnProb(lnBCI|rhoA2o,rhoB2o) sanity')

### options for plotting
parser.add_option('', '--Ngrid', default=100, type='int',
    help='the number of grid points used in heatmap plots')

parser.add_option('', '--colormap', default='OrRd', type='string')
parser.add_option('', '--crosshair-color', default='k', type='string')
parser.add_option('', '--contour-color', default='w', type='string')

parser.add_option('', '--log', default=False, action='store_true')

parser.add_option('', '--figwidth', default=6, type='float')
parser.add_option('', '--figheight', default=5, type='float')

parser.add_option('-o', '--output-dir', default='.', action='store_true')
parser.add_option('-t', '--tag', default='', type='string')

opts, args = parser.parse_args()

opts.verbose = opts.Verbose or opts.verbose

if opts.tag:
    opts.tag = "_"+opts.tag

#-------------------------------------------------

#--- lnProb functions
if opts.everything or opts.lnP_rhoA2rhoB2 or opts.lnP_rho2eta2 or opts.lnP_lnBSNlnBCI:
    if opts.verbose:
        print( 'testing lnProb(*|rhoA2o,rhoB2o) functionality with %d randomly drawn samples'%(opts.Nsamp) )

    ### set up mapping parameters
    params = utils.BayesMapParams(
        c_bsn = opts.c_bsn,
        g_bsn = opts.g_bsn,
        c_bci = opts.c_bci,
        g_bci = opts.g_bci,
    )

    ### randomly draw samples
    ones = np.ones(opts.Ngrid**2, dtype='float') ### useful to define this once

    for ind, (rhoA2o, rhoB2o) in enumerate(opts.min_rho2 + np.random.rand(opts.Nsamp,2)*(opts.max_rho2 - opts.min_rho2)):

        if opts.verbose:
            print( 'iteration %d'%ind )

        rhoAo = rhoA2o**0.5
        rhoBo = rhoB2o**0.5
        rho2o, eta2o = utils.rhoA2rhoB2_to_rho2eta2( rhoA2o, rhoB2o )
        lnBSNo = utils.rho2_to_lnBSN( rho2o, params )
        lnBCIo = utils.eta2_to_lnBCI( eta2o, params )

        #--- test lnProb(rhoA2,rhoB2|rhoA2o,rhoB2o)
        if opts.lnP_rhoA2rhoB2:
            if opts.Verbose:
                print( '    lnProb(rhoA2,rhoB2|rhoA2o,rhoB2o)' )

            fig = plt.figure(figsize=(opts.figwidth, opts.figheight))
            ax = fig.gca()

            xo = rhoA2o
            yo = rhoB2o

            xmin = xo/2.
            xmax = xo*3/2.
            ymin = yo/2.
            ymax = yo*3/2.
            extent = (xmin, xmax, ymin, ymax)

            X, Y = np.meshgrid( np.linspace(xmin, xmax, opts.Ngrid), np.linspace(ymin, ymax, opts.Ngrid) )
            lnP = utils.lnProb_rhoA2rhoB2_given_rhoA2orhoB2o(X.flatten(), Y.flatten(), ones*xo, ones*yo).reshape(opts.Ngrid, opts.Ngrid)
            contours = ax.contour(lnP, interpoloation='bilinear', origin='lower', extent=extent, colors=opts.contour_color)
            if not opts.log:
                lnP = np.exp(lnP)

            imag = ax.imshow(lnP, interpolation='bilinear', origin='lower', extent=extent, aspect='auto', cmap=opts.colormap)
            ax.plot( [xo]*2, [ymin, ymax], color=opts.crosshair_color )
            ax.plot( [xmin, xmax], [yo]*2, color=opts.crosshair_color )

            colorbar = plt.colorbar(imag, orientation='vertical')

            ax.set_xlim(xmin=xmin, xmax=xmax)
            ax.set_ylim(ymin=ymin, ymax=ymax)

            ax.set_xlabel('$\\rho_A^2$')
            ax.set_ylabel('$\\rho_B^2$')

            if opts.log:
                colorbar.set_label('$\ln\, p(\\rho_A^2,\\rho_B^2|(\\rho_A^2)_0, (\\rho_B^2)_0)$')
            else:
                colorbar.set_label('$p(\\rho_A^2,\\rho_B^2|(\\rho_A^2)_0, (\\rho_B^2)_0)$')

            ax.set_title('$(\\rho_A)_0=%.2f$    $(\\rho_B)_0=%.2f$'%(rhoAo, rhoBo))

            figname = "%s/lnProb_rhoA2rho2B%s-%d.png"%(opts.output_dir, opts.tag, ind)
            if opts.Verbose:
                print( '    saving : %s'%figname )
            fig.savefig(figname)
            plt.close(fig)

        #--- test lnProb(rho2,eta2|rhoA2o,rhoB2o)
        if opts.lnP_rho2eta2:
            if opts.Verbose:
                print( '    lnProb(rho2,eta2|rhoA2o,rhoB2o)' )

            fig = plt.figure(figsize=(opts.figwidth, opts.figheight))
            ax = fig.gca()

            xo = rho2o
            yo = eta2o

            xmin = xo/2.
            xmax = xo*3/2.
            ymin = yo/2.
            ymax = min(yo*3/2., 0.25*xmax)
            extent = (xmin, xmax, ymin, ymax)

            X, Y = np.meshgrid( np.linspace(xmin, xmax, opts.Ngrid), np.linspace(ymin, ymax, opts.Ngrid) )
            lnP = []
            for x, y in zip(X.flatten(), Y.flatten()): ### we go through this backflip to ensure we feed in valid values of (rho2,eta2)
                lnP.append( utils.lnProb_rho2eta2_given_rhoA2orhoB2o(x, y, xo, yo) if 4*y<=x else -np.infty )
            lnP = np.array(lnP).reshape(opts.Ngrid, opts.Ngrid)
            if not opts.log:
                lnP = np.exp(lnP)

            imag = ax.imshow(lnP, interpolation='bilinear', origin='lower', extent=extent, aspect='auto', cmap=opts.colormap)
            contours = ax.contour(lnP, interpoloation='bilinear', origin='lower', extent=extent, colors=opts.contour_color)
            ax.plot( [xo]*2, [ymin, ymax], color=opts.crosshair_color )
            ax.plot( [xmin, xmax], [yo]*2, color=opts.crosshair_color )

            colorbar = plt.colorbar(imag, orientation='vertical')

            ax.set_xlim(xmin=xmin, xmax=xmax)
            ax.set_ylim(ymin=ymin, ymax=ymax)

            ax.set_xlabel('$\\rho^2$')
            ax.set_ylabel('$\eta^2$')

            if opts.log:
                colorbar.set_label('$\ln\, p(\\rho^2,\eta^2|(\\rho_A^2)_0, (\\rho_B^2)_0)$')
            else:
                colorbar.set_label('$p(\\rho^2,\eta^2|(\\rho_A^2)_0, (\\rho_B^2)_0)$')

            ax.set_title('$(\\rho_A)_0=%.2f$    $(\\rho^2)_0=%.2f$\n$(\\rho_B)_0=%.2f$    $(\eta^2)_0=%.2f$'%(rhoAo, rho2o, rhoBo, eta2o), fontsize=10)

            figname = "%s/lnProb_rho2eta2%s-%d.png"%(opts.output_dir, opts.tag, ind)
            if opts.Verbose:
                print( '    saving : %s'%figname )
            fig.savefig(figname)
            plt.close(fig)

        #--- test lnProb(lnBSN,lnBCI|rhoA2o,rhoB2o)
        if opts.lnP_lnBSNlnBCI:
            if opts.Verbose:
                print( '    lnProb(lnBSN,lnBCI|rhoA2o,rhoB2o)' )

            fig = plt.figure(figsize=(opts.figwidth, opts.figheight))
            ax = fig.gca()

            xo = lnBSNo
            yo = lnBCIo

            xmin = xo/2.
            xmax = xo*3/2.
            ymin = yo/2.
            ymax = min(
                yo*3/2., 
                utils.newton(lambda y: 2*np.exp((y-params.g_bci)/params.c_bci)+params.c_bsn*(np.log(4) + (y-params.g_bci)/params.c_bci) + params.g_bsn - xmax, lnBCIo, tol=1e-12)
            )
            extent = (xmin, xmax, ymin, ymax)

            X, Y = np.meshgrid( np.linspace(xmin, xmax, opts.Ngrid), np.linspace(ymin, ymax, opts.Ngrid) )
            lnP = []
            for x, y in zip(X.flatten(), Y.flatten()): ### this is necessary because of the constraints on (lnBSN,lnBCI)
                lnP.append( utils.lnProb_lnBSNlnBCI_given_rhoA2orhoB2o(x, y, xo, yo, params, f_tol=opts.f_tol) \
                    if x >= 2*np.exp((y-params.g_bci)/params.c_bci) + params.c_bsn*(np.log(4) + (y-params.g_bci)/params.c_bci) + params.g_bsn \
                    else -np.infty 
                )
            lnP = np.array(lnP).reshape(opts.Ngrid, opts.Ngrid)
            if not opts.log:
                lnP = np.exp(lnP)

            imag = ax.imshow(lnP, interpolation='bilinear', origin='lower', extent=extent, aspect='auto', cmap=opts.colormap)
            contours = ax.contour(lnP, interpoloation='bilinear', origin='lower', extent=extent, colors=opts.contour_color)
            ax.plot( [xo]*2, [ymin, ymax], color=opts.crosshair_color )
            ax.plot( [xmin, xmax], [yo]*2, color=opts.crosshair_color )

            colorbar = plt.colorbar(imag, orientation='vertical')

            ax.set_xlim(xmin=xmin, xmax=xmax)
            ax.set_ylim(ymin=ymin, ymax=ymax)

            ax.set_xlabel('$\ln B^S_N$')
            ax.set_ylabel('$\ln B^C_I$')

            if opts.log:
                colorbar.set_label('$\ln\, p(\ln B^S_N,\ln B^C_I|(\\rho_A^2)_0, (\\rho_B^2)_0)$')
            else:
                colorbar.set_label('$p(\ln B^S_N,\ln B^C_I|(\\rho_A^2)_0, (\\rho_B^2)_0)$')

            ax.set_title('$(\\rho_A)_0=%.2f$    $(\ln B^S_N)_0=%.2f$\n$(\\rho_B)_0=%.2f$    $(\ln B^C_I)_0=%.2f$'%(rhoAo, lnBSNo, rhoBo, lnBCIo), fontsize=10)

            figname = "%s/lnProb_lnBSNlnBCI%s-%d.png"%(opts.output_dir, opts.tag, ind)
            if opts.Verbose:
                print( '    saving : %s'%figname )
            fig.savefig(figname)
            plt.close(fig)

        #--- test lnProb(rhoA2|rhoA2o,rhoB2o)
        if opts.lnP_rhoA2:
            if opts.Verbose:
                print( '    lnProb(rhoA2|rhoA2o,rhoB2o)' )

            raise NotImplementedError

        #--- test lnProb(rhoB2|rhoA2o,rhoB2o)
        if opts.lnP_rhoB2:
            if opts.Verbose:
                print( '    lnProb(rhoB2|rhoA2o,rhoB2o)' )

            raise NotImplementedError

        #--- test lnProb(rho2|rhoA2o,rhoB2o)
        if opts.lnP_rho2:
            if opts.Verbose:
                print( '    lnProb(rho2|rhoA2o,rhoB2o)' )

            raise NotImplementedError

        #--- test lnProb(eta2|rhoA2o,rhoB2o)
        if opts.lnP_eta2:
            if opts.Verbose:
                print( '    lnProb(eta2|rhoA2o,rhoB2o)' )

            raise NotImplementedError

        #--- test lnProb(lnBSN|rhoA2o,rhoB2o)
        if opts.lnP_lnBSN:
            if opts.Verbose:
                print( '    lnProb(lnBSN|rhoA2o,rhoB2o)' )

            raise NotImplementedError

        #--- test lnProb(lnBCI|rhoA2o,rhoB2o)
        if opts.lnP_lnBCI:
            if opts.Verbose:
                print( '    lnProb(lnBCI|rhoA2o,rhoB2o)' )

            raise NotImplementedError
